const Game = require("../models/Game");
const { ObjectId } = require("mongoose").Types;
const API_URL = process.env.API_URL || "http://localhost:5000";

const getGames = async (req, res) => {
    try {
        const games = await Game.find().populate("teams");
        console.log("üîç –û—Ç—Ä–∏–º–∞–Ω—ñ —ñ–≥—Ä–∏:", games);
        res.status(200).json(games);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–≥–æ—Ä:", error);
        res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É" });
    }
};


const createGame = async (req, res) => {
    try {
        const { type, date, name, map, about } = req.body;

        if (!type || !date || !name || !map || !about) {
            return res.status(400).json({ message: "–ù–µ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ" });
        }

        const gameImages = req.files?.map(file => `${API_URL}/static/${file.filename}`) || [];

        const game = new Game({
            type,
            date,
            name,
            map,
            about,
            gameImages,
        });

        await game.save();
        res.status(201).json(game);
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∏:", error);
        res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É" });
    }
};

const getGameIdByParams = async (req, res) => {
    try {
        const { id } = req.params;

        if (!ObjectId.isValid(id)) {
            return res.status(400).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä–∏" });
        }

        const game = await Game.findById(id); // –ø–æ–≤–µ—Ä—Ç–∞—î –≤—Å—é –≥—Ä—É
        if (!game) {
            return res.status(404).json({ message: "–ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
        }

        res.status(200).json(game); // –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤—Å—é –≥—Ä—É
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –≥—Ä–∏:", error);
        res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≥—Ä–∏" });
    }
};


module.exports = {
    getGames,
    createGame,
    getGameIdByParams,
};
